import pandas as pd
import numpy as np

df = pd.read_csv("./sales_data_sample.csv", encoding = 'unicode_escape')
df.head

df.info()

to_drop = ['ADDRESSLINE1','ADDRESSLINE2','STATE','POSTALCODE','PHONE']
df.drop(to_drop,axis = 1)

df.isnull().sum()

df.dtypes

df['ORDERDATE'] = pd.to_datetime(df['ORDERDATE'])

df_RFM.head()

df_RFM['M'] = pd.qcut(df_RFM['MonetaryValue'], q=4, labels = range(1,5))
df_RFM['R'] = pd.qcut(df_RFM['Recency'], q=4,labels = list(range(4,0,-1)))
df_RFM['F'] = pd.qcut(df_RFM['Frequency'],q=4,labels = range(1,5))
df_RFM.head()

df_RFM['RFM_Score'] = df_RFM[['R','M','F']].sum(axis = 1)
df_RFM.head()

def rfm_level(df):
    if bool(df['RFM_Score'] >=10):
        return 'High value customer'
    elif bool(df['RFM_Score']<10) and bool(df['RFM_Score'] >=6):
        return "Mid value customer"
    else:
        return "Low value customer"
df_RFM['RFM_Level'] = df_RFM.apply(rfm_level, axis = 1)
df_RFM.head()

data = df_RFM[['Recency','Frequency','MonetaryValue']]
data.head()

data_log = np.log(data)
data_log.head()

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(data_log)
data_normalized = scaler.transform(data_log)
data_normalized = pd.DataFrame(data_normalized,index = data_log.index,columns = data_log.columns)
data_normalized.describe().round(2)

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
sse = {}
for k in range(1,21):
    kmeans = KMeans(n_clusters = k, random_state = 1)
    kmeans.fit(data_normalized)
    sse[k] = kmeans.inertia_

plt.figure(figsize=(10,6))
plt.title("The elbow method")
plt.xlabel('K')
plt.ylabel("SSE")
plt.style.use("ggplot")
sns.pointplot(x = list(sse.keys()), y = list(sse.values()))
plt.text(4.5,60,"Largest angle",bbox = dict(facecolor = 'lightgreen',alpha = 0.6))
plt.show()

kmeans = KMeans(n_clusters= 5, random_state = 1)
kmeans.fit(data_normalized)
cluster_labels = kmeans.labels_
data_rfm = data.assign(Cluster = cluster_labels)
data_rfm.head()